plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version "${shadow_version}" apply true
}

// ... other configurations ...
shadowJar {
    doLast {
        // Optional: Rename the shadow JAR file if needed
        archiveFileName = "your-desired-name.jar"

        // Include only the classes from the whisper-jni JAR in the fat JAR
        def whisperJniDependency = configurations.runtimeClasspath.find { it.name.startsWith('whisper-jni') }
        if (whisperJniDependency) {
            configurations = [whisperJniDependency.map { zipTree(it) }]
        } else {
            // Handle the case where whisper-jni dependency is not found
            // You can print a warning or take appropriate action
            println "Warning: whisper-jni dependency not found."
        }
    }
}
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
    maven { url = 'https://maven.fabricmc.net/' }
    repositories {
        maven {
            url = 'https://api.modrinth.com/maven'
            content {
                includeGroup 'maven.modrinth'
            }
        }

        mavenCentral()
        maven { url "https://jitpack.io" }
    }
    mavenLocal()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven {url "https://clojars.org/repo"}
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation(files('lib/whisper-jni-1.5.2.jar'))
    runtimeOnly(files('lib/whisper-jni-1.5.2.jar'))

    implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"

    modImplementation "maven.modrinth:simple-voice-chat:fabric-${voicechat_mod_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "voicechat_api_version", project.voicechat_api_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "voicechat_api_version": project.voicechat_api_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // Include only the classes from the whisper-jni JAR
    doFirst {
        def whisperJniDependency = configurations.runtimeClasspath.find { it.name.startsWith('whisper-jni') }
        if (whisperJniDependency) {
            from(zipTree(whisperJniDependency))
        } else {
            // Handle the case where whisper-jni dependency is not found
            // You can print a warning or take appropriate action
            println "Warning: whisper-jni dependency not found."
        }
    }
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
